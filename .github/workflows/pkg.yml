name: Packaging

on:
  push:
  workflow_dispatch:

# TODO: Use a matrix here for the different permutations of settings to invoke the reusable workflow with?

jobs:
  full:
    uses: NLnetLabs/ploutos/.github/workflows/pkg-rust.yml@strict-mode
    secrets: inherit
    with:
      artifact_prefix: full_
      strict_mode: true

      cross_build_rules: pkg/rules/cross-build-rules.yml
      cross_build_args: --no-default-features

      docker_org: ximoneighteen
      docker_repo: ximontest
      docker_build_rules: pkg/rules/docker-build-rules.yml

      package_build_rules: |
        pkg:
          - "mytest"
        image:
          - "ubuntu:bionic"
          - "ubuntu:jammy" # ubuntu/22.04
          - "debian:buster"
          - "debian:stretch"
          - "centos:7"
          - "rockylinux:8"     # compatible with EOL centos:8
        target:
          - "x86_64"
        include:
          # package for the Raspberry Pi 1b as an ARMv6 cross compiled variant of the Debian Buster upon which
          # Raspbian 10 is based.
          - pkg: "mytest"
            image: "debian:buster"
            target: "arm-unknown-linux-gnueabihf"
            deb_extra_lintian_args: "--suppress-tags binary-without-manpage"

          - pkg: "mytest"
            image: "centos:7"
            systemd_service_unit_file: "pkg/common/mytest.mytest.*"
            target: "x86_64"

          # CentOS 8 became EOL and is in theory still usable as a build container as there is still a Docker image
          # available, and package installation can be done by switching the yum config in the container to use packages
          # from the CentOS 8 vault rather than the now offline actual CentOS 8 repository. However, due to experiencing
          # lots of timed out connections to the vault we will build the CentOS 8 compatible package in a Rocky Linux
          # container instead, as Rocky Linux is 100% compatible with CentOS 8. The server at packages.nlnetlabs.nl
          # however has a repo for CentOS 8, not Rocky Linux, and determines the repo to publish in based on the name of
          # the archive that we produce below which is in turn based by default on the container image used to build. We
          # therefore in this case need to specify that the O/S we are building for has a different name than the Docker
          # image we are building it in.
          - pkg: "mytest"
            image: "rockylinux:8"
            systemd_service_unit_file: "pkg/common/mytest.mytest.*"
            target: "x86_64"
            os: "centos:8"

          - pkg: "mytest"
            image: "ubuntu:jammy"
            target: "x86_64"
            deb_extra_lintian_args: "--suppress-tags no-manual-page"

      package_test_rules: pkg/rules/package-test-rules.yml
      package_test_scripts_path: pkg/test-scripts/test-<package>.sh

      deb_extra_build_packages: libssl-dev
      deb_apt_key_url: "https://raw.githubusercontent.com/NLnetLabs/.github-testing/main/repo/apt-key.asc"
      deb_apt_source: "deb https://raw.githubusercontent.com/NLnetLabs/.github-testing/main/repo/linux/${OS_NAME}/ ${OS_REL} main"

      rpm_scriptlets_path: pkg/rpm/scriptlets.toml
      rpm_yum_key_url: "https://raw.githubusercontent.com/NLnetLabs/.github-testing/main/repo/yum-key.asc"
      rpm_yum_repo: |
        [nlnetlabs]
        name=NLnet Labs
        baseurl=https://raw.githubusercontent.com/NLnetLabs/.github-testing/main/repo/linux/centos/$releasever/main/$basearch
        enabled=1
