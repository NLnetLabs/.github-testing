# Scripts based on the RPM %systemd_post scriptlet. See:
#   - https://docs.fedoraproject.org/en-US/packaging-guidelines/Scriptlets/#_systemd
#   - https://github.com/systemd/systemd/blob/v251/src/rpm/macros.systemd.in
#   - https://github.com/systemd/systemd/blob/v251/src/rpm/triggers.systemd.in
#   - https://github.com/systemd/systemd/blob/v251/src/rpm/systemd-update-helper.in
#
# As we currently target CentOS 7 and CentOS 8, these are the relevant versions of the
# original scripts (systemd-update-helper doesn't exist in these versions yet):
#
#   CentOS 8 systemd v239: https://github.com/systemd/systemd/blob/v239/src/core/macros.systemd.in
#                          https://github.com/systemd/systemd/blob/v239/src/core/triggers.systemd.in
#   CentOS 7 systemd v219: https://github.com/systemd/systemd/blob/v219/src/core/macros.systemd.in
#
# TODO: Allow the author of this file to add a line #SYSTEMD_RPM_MACROS# that will be replaced
# automatically by the helper functions that emulate systemd RPM macros behaviour for various
# known/supported versions of systemd.

post_install_script = '''
#!/bin/bash -e
systemd_update_helper_v239() {
    case "$command" in
        install-system-units)
            systemctl --no-reload preset "$@" &>/dev/null
            ;;

        system-reload)
            systemctl daemon-reload
            ;;
    esac
}

systemd_update_helper_v219() {
    case "$command" in
        install-system-units)
            systemctl preset "$@" &>/dev/null 2>&1
            ;;

        system-reload)
            ;;
    esac
}

systemd_update_helper() {
    command="${1:?}"
    shift

    command -v systemctl >/dev/null || exit 0

    # Determine the version of systemd we are running under.
    # systemctl --version outputs a first line of the form:
    #   systemd 239 (239-58.el8_6.8)
    SYSTEMD_VER=$(systemctl --version | head -1 | awk '{ print $2}')

    if [ ${SYSTEMD_VER} -le 219 ]; then
        systemd_update_helper_v219 "$@"
    else
        systemd_update_helper_v239 "$@"
    fi
}

systemd_post() {
    systemd_update_helper install-system-units "$@"
}

systemd_triggers() {
    systemd_update_helper system-reload
}

if [ $EUID -ne 0 ]; then
    echo >&2 "ERROR: postinst script must be run as root"
    exit 1
fi

if [ $1 -eq 1 ] ; then
    # Initial installation
    R_USER=my_test
    R_GROUP=${R_USER}
    R_HOME_DIR=/var/lib/${R_USER}
    R_HOME_DIR_PERMS=700

    # https://github.com/NLnetLabs/routinator/issues/774
    if ! id ${R_USER} > /dev/null 2>&1; then
        # According to the CentOS 7 useradd man page:
        # --user-group causes a group by the same name as the user to be created
        # --create-home should force creation of a home dir even for a system account.
        useradd --home-dir ${R_HOME_DIR} --system --create-home --user-group ${R_USER}
    fi

    # Ensure that the home directory has the correct ownership
    chown -R ${R_USER}:${R_GROUP} ${R_HOME_DIR}

    # Ensure that the home directory has the correct permissions
    chmod ${R_HOME_DIR_PERMS} ${R_HOME_DIR}

    # Run commands equivalent what the RPM systemd macros would do
    systemd_post mytest.timer
    systemd_triggers

    # Force the new service to be activated immediately post-install. This goes against Fedora policy as Fedora says
    # the distribution and system operator decide which services should be activated automatically by way of systemd
    # preset files. E.g. the `systemd.preset` man page says:
    #
    #   It is not recommended to ship preset files within the respective software packages implementing the units, but
    #   rather centralize them in a distribution or spin default policy, which can be amended by administrator policy,
    #   see below.
    #
    #   If no preset files exist, preset operations will enable all units that are installed by default. If this is not
    #   desired and all units shall rather be disabled, it is necessary to ship a preset file with a single, catchall
    #   "disable *" line. (See example 1, below.)
    #
    #   From: https://www.freedesktop.org/software/systemd/man/systemd.preset.html#Description
    #
    # Fedora 36 for example has such a "catchall" "disable *" preset policy.
    systemctl enable --now mytest.timer
fi
'''

pre_uninstall_script = '''
#!/bin/bash -e
systemd_update_helper_v239() {
    case "$command" in
        remove-system-units)
            systemctl --no-reload disable --now "$@" &>/dev/null
            ;;

        system-reload)
            systemctl daemon-reload
            ;;
    esac
}

systemd_update_helper_v219() {
    case "$command" in
        remove-system-units)
            systemctl --no-reload disable "$@" > /dev/null 2>&1
            systemctl stop "$@" > /dev/null 2>&1
            ;;

        system-reload)
            ;;
    esac
}

systemd_update_helper() {
    command="${1:?}"
    shift

    command -v systemctl >/dev/null || exit 0

    # Determine the version of systemd we are running under.
    # systemctl --version outputs a first line of the form:
    #   systemd 239 (239-58.el8_6.8)
    SYSTEMD_VER=$(systemctl --version | head -1 | awk '{ print $2}')

    if [ ${SYSTEMD_VER} -le 219 ]; then
        systemd_update_helper_v219 "$@"
    else
        systemd_update_helper_v239 "$@"
    fi
}

systemd_preun() {
    systemd_update_helper remove-system-units "$@"
}

systemd_triggers() {
    systemd_update_helper system-reload
}

if [ $1 -eq 0 ] ; then
    # Package removal, not upgrade
    # Run commands equivalent what the RPM systemd macros would do
    systemd_preun mytest.timer
    systemd_triggers
fi
'''

post_uninstall_script = '''
#!/bin/bash -e
systemd_update_helper_v239() {
    case "$command" in
        mark-restart-system-units)
            systemctl try-restart "$@" &>/dev/null
            ;;

        system-reload)
            systemctl daemon-reload
            ;;

        system-restart)
            ;;
    esac
}

systemd_update_helper_v219() {
    case "$command" in
        mark-restart-system-units)
            systemctl try-restart "$@" >/dev/null 2>&1
            ;;

        system-reload)
            ;;

        system-restart)
            ;;
    esac
}

systemd_update_helper() {
    command="${1:?}"
    shift

    command -v systemctl >/dev/null || exit 0

    # Determine the version of systemd we are running under.
    # systemctl --version outputs a first line of the form:
    #   systemd 239 (239-58.el8_6.8)
    SYSTEMD_VER=$(systemctl --version | head -1 | awk '{ print $2}')

    if [ ${SYSTEMD_VER} -le 219 ]; then
        systemd_update_helper_v219 "$@"
    else
        systemd_update_helper_v239 "$@"
    fi
}

systemd_postun_with_restart() {
    systemd_update_helper mark-restart-system-units "$@"
}

systemd_triggers() {
    systemd_update_helper system-reload
    systemd_update_helper system-restart
}

if [ $1 -ge 1 ] ; then
    # Run commands equivalent what the RPM systemd macros would do
    systemd_postun_with_restart mytest.timer
    systemd_triggers
fi
'''