post_install_script = '''
#!/bin/bash -e
# Script based on the RPM %systemd_post scriptlet. See:
#   - https://docs.fedoraproject.org/en-US/packaging-guidelines/Scriptlets/#_systemd
#   - https://github.com/systemd/systemd/blob/main/src/rpm/macros.systemd.in
#   - https://github.com/systemd/systemd/blob/main/src/rpm/triggers.systemd.in
#   - https://github.com/systemd/systemd/blob/main/src/rpm/systemd-update-helper.in
systemd_update_helper() {
    command="${1:?}"
    shift
    
    command -v systemctl >/dev/null || exit 0

    case "$command" in
        install-system-units)
            systemctl --no-reload preset "$@"
            ;;

        system-reload-restart|system-reload|system-restart)
            if [ -n "$*" ]; then
                echo "Unexpected arguments for '$command': $*"
                exit 2
            fi
    
            [ -d /run/systemd/system ] || exit 0
    
            if [[ "$command" =~ reload ]]; then
                systemctl daemon-reload
            fi
    
            if [[ "$command" =~ restart ]]; then
                systemctl reload-or-restart --marked
            fi
            ;;
    esac
}

systemd_triggers() {
    systemd_update_helper system-reload-restart
}

systemd_post() {
    systemd_update_helper install-system-units "$@"
}

if [ $EUID -ne 0 ]; then
    echo >&2 "ERROR: postinst script must be run as root"
    exit 1
fi

if [ $1 -eq 1 ] ; then
    # Initial installation
    R_USER=my_test
    R_GROUP=${R_USER}
    R_HOME_DIR=/var/lib/${R_USER}
    R_HOME_DIR_PERMS=700

    # https://github.com/NLnetLabs/routinator/issues/774
    if ! id ${R_USER} > /dev/null 2>&1; then
        # According to the CentOS 7 useradd man page:
        # --user-group causes a group by the same name as the user to be created
        # --create-home should force creation of a home dir even for a system account.
        useradd --home-dir ${R_HOME_DIR} --system --create-home --user-group ${R_USER}
    fi

    # Ensure that the home directory has the correct ownership
    chown -R ${R_USER}:${R_GROUP} ${R_HOME_DIR}

    # Ensure that the home directory has the correct permissions
    chmod ${R_HOME_DIR_PERMS} ${R_HOME_DIR}

    # Run commands equivalent what the RPM systemd macros would do
    systemd_post mytest.timer
    systemd_triggers
fi
'''

pre_uninstall_script = '''
#!/bin/bash -e
# Script based on the RPM %systemd_preun scriptlet. See:
#   - https://docs.fedoraproject.org/en-US/packaging-guidelines/Scriptlets/#_systemd
#   - https://github.com/systemd/systemd/blob/main/src/rpm/macros.systemd.in
#   - https://github.com/systemd/systemd/blob/main/src/rpm/triggers.systemd.in
#   - https://github.com/systemd/systemd/blob/main/src/rpm/systemd-update-helper.in
systemd_update_helper() {
    command="${1:?}"
    shift
    
    command -v systemctl >/dev/null || exit 0

    case "$command" in
        remove-system-units)
            if [ -d /run/systemd/system ]; then
                systemctl --no-reload disable --now "$@"
            else
                systemctl --no-reload disable "$@"
            fi
            ;;

        system-reload-restart|system-reload|system-restart)
            if [ -n "$*" ]; then
                echo "Unexpected arguments for '$command': $*"
                exit 2
            fi
    
            [ -d /run/systemd/system ] || exit 0
    
            if [[ "$command" =~ reload ]]; then
                systemctl daemon-reload
            fi
    
            if [[ "$command" =~ restart ]]; then
                systemctl reload-or-restart --marked
            fi
            ;;
    esac
}

systemd_preun() {
    systemd_update_helper remove-system-units "$@"
}

systemd_triggers() {
    systemd_update_helper system-reload-restart
}

if [ $1 -eq 0 ] ; then
    # Package removal, not upgrade
    # Run commands equivalent what the RPM systemd macros would do
    systemd_preun mytest.timer
    systemd_triggers
fi
'''

post_uninstall_script = '''
#!/bin/bash -e
# Script based on the RPM %systemd_postun scriptlet. See:
#   - https://docs.fedoraproject.org/en-US/packaging-guidelines/Scriptlets/#_systemd
#   - https://github.com/systemd/systemd/blob/main/src/rpm/macros.systemd.in
#   - https://github.com/systemd/systemd/blob/main/src/rpm/triggers.systemd.in
#   - https://github.com/systemd/systemd/blob/main/src/rpm/systemd-update-helper.in
systemd_update_helper() {
    command="${1:?}"
    shift
    
    command -v systemctl >/dev/null || exit 0

    case "$command" in
        mark-restart-system-units)
            [ -d /run/systemd/system ] || exit 0
    
            for unit in "$@"; do
                systemctl set-property "$unit" Markers=+needs-restart &
            done
            wait
            ;;

        system-reload-restart|system-reload|system-restart)
            if [ -n "$*" ]; then
                echo "Unexpected arguments for '$command': $*"
                exit 2
            fi
    
            [ -d /run/systemd/system ] || exit 0
    
            if [[ "$command" =~ reload ]]; then
                systemctl daemon-reload
            fi
    
            if [[ "$command" =~ restart ]]; then
                systemctl reload-or-restart --marked
            fi
            ;;
    esac
}

systemd_postun_with_restart() {
    systemd_update_helper mark-restart-system-units "$@"
}

systemd_triggers() {
    systemd_update_helper system-reload
    systemd_update_helper system-restart
}

if [ $1 -ge 1 ] ; then
    # Run commands equivalent what the RPM systemd macros would do
    systemd_postun_with_restart mytest.timer
    systemd_triggers
fi
'''